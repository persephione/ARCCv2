// This code was generated by RudementaryLathe on 10/6/2015 12:00:00 AM by version:1.0.5757.15819.
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.Linq;

namespace ARCCv2.UnitTest
{
    [TestClass]
    public class ARCCv2SmokeTestTables : TestBase
    {
        [TestMethod]
        public void TestConnectionString()
        {
            try
            {
                var connection = System.Configuration.ConfigurationManager.ConnectionStrings["ARCCv2"];
                Assert.IsTrue(true, "Valid Connection String Detected");
            }
            catch (System.Configuration.ConfigurationErrorsException ex)
            {
                Assert.Fail("The ARCCv2 connection string is missing or invalid");
            }
        }


        [TestMethod]
        public void TestARCCHardwareBudgetRepository()
        {
            var result = Uow.ARCCHardwareBudgetRepository.GetAll().Take(10).ToList();
            Assert.IsNotNull(result, "ARCCHardwareBudgetRepository.GetAll() returned null");
        }

        [TestMethod]
        public void TestARCCOtherBudgetRepository()
        {
            var result = Uow.ARCCOtherBudgetRepository.GetAll().Take(10).ToList();
            Assert.IsNotNull(result, "ARCCOtherBudgetRepository.GetAll() returned null");
        }

        [TestMethod]
        public void TestARCCProposalRepository()
        {
            var result = Uow.ARCCProposalRepository.GetAll().Take(10).ToList();
            Assert.IsNotNull(result, "ARCCProposalRepository.GetAll() returned null");
        }

        [TestMethod]
        public void TestARCCScoreRepository()
        {
            var result = Uow.ARCCScoreRepository.GetAll().Take(10).ToList();
            Assert.IsNotNull(result, "ARCCScoreRepository.GetAll() returned null");
        }

        [TestMethod]
        public void TestARCCSoftwareBudgetRepository()
        {
            var result = Uow.ARCCSoftwareBudgetRepository.GetAll().Take(10).ToList();
            Assert.IsNotNull(result, "ARCCSoftwareBudgetRepository.GetAll() returned null");
        }

        [TestMethod]
        public void TestDeeHardwareBudgetRepository()
        {
            var result = Uow.DeeHardwareBudgetRepository.GetAll().Take(10).ToList();
            Assert.IsNotNull(result, "DeeHardwareBudgetRepository.GetAll() returned null");
        }

        [TestMethod]
        public void TestDeeOtherBudgetRepository()
        {
            var result = Uow.DeeOtherBudgetRepository.GetAll().Take(10).ToList();
            Assert.IsNotNull(result, "DeeOtherBudgetRepository.GetAll() returned null");
        }

        [TestMethod]
        public void TestDeeProposalRepository()
        {
            var result = Uow.DeeProposalRepository.GetAll().Take(10).ToList();
            Assert.IsNotNull(result, "DeeProposalRepository.GetAll() returned null");
        }

        [TestMethod]
        public void TestDeeScoreRepository()
        {
            var result = Uow.DeeScoreRepository.GetAll().Take(10).ToList();
            Assert.IsNotNull(result, "DeeScoreRepository.GetAll() returned null");
        }

        [TestMethod]
        public void TestDeeSoftwareBudgetRepository()
        {
            var result = Uow.DeeSoftwareBudgetRepository.GetAll().Take(10).ToList();
            Assert.IsNotNull(result, "DeeSoftwareBudgetRepository.GetAll() returned null");
        }

        [TestMethod]
        public void TestUserRepository()
        {
            var result = Uow.UserRepository.GetAll().Take(10).ToList();
            Assert.IsNotNull(result, "UserRepository.GetAll() returned null");
        }

        [TestMethod]
        public void TestUserTypeRepository()
        {
            var result = Uow.UserTypeRepository.GetAll().Take(10).ToList();
            Assert.IsNotNull(result, "UserTypeRepository.GetAll() returned null");
        }
    }
}
