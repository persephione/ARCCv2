// This code was generated by RudementaryLathe on 10/6/2015 12:00:00 AM by version:1.0.5757.15819.
using ARCCv2.Contracts;
using System;
using System.Collections.Generic;
using System.Data.Entity;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ARCCv2.Data
{
    public class TableRepositories
    {
        /// <summary>
        /// Return the runtime repository factory functions,
        /// each one is a factory for a repository of a particular type.
        /// </summary>
        /// <remarks>
        /// MODIFY THIS METHOD TO ADD CUSTOM FACTORY FUNCTIONS
        /// </remarks>
        public IDictionary<Type, Func<DbContext, object>> GetDictionary()
        {
            return new Dictionary<Type, Func<DbContext, object>>
            {
                {typeof(IARCCHardwareBudgetRepository), dbContext => new ARCCHardwareBudgetRepository(dbContext)},
                {typeof(IARCCOtherBudgetRepository), dbContext => new ARCCOtherBudgetRepository(dbContext)},
                {typeof(IARCCProposalRepository), dbContext => new ARCCProposalRepository(dbContext)},
                {typeof(IARCCScoreRepository), dbContext => new ARCCScoreRepository(dbContext)},
                {typeof(IARCCSoftwareBudgetRepository), dbContext => new ARCCSoftwareBudgetRepository(dbContext)},
                {typeof(IDeeHardwareBudgetRepository), dbContext => new DeeHardwareBudgetRepository(dbContext)},
                {typeof(IDeeOtherBudgetRepository), dbContext => new DeeOtherBudgetRepository(dbContext)},
                {typeof(IDeeProposalRepository), dbContext => new DeeProposalRepository(dbContext)},
                {typeof(IDeeScoreRepository), dbContext => new DeeScoreRepository(dbContext)},
                {typeof(IDeeSoftwareBudgetRepository), dbContext => new DeeSoftwareBudgetRepository(dbContext)},
                {typeof(IUserRepository), dbContext => new UserRepository(dbContext)},
                {typeof(IUserTypeRepository), dbContext => new UserTypeRepository(dbContext)},
            };
        }
    }
}
