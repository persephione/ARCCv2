// This code was generated by RudementaryLathe on 10/6/2015 12:00:00 AM by version:1.0.5757.15819.
using ARCCv2.Contracts;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ARCCv2.Data
{
    /// <summary>
    /// The 'Unit of Work'
    ///     1) decouples the repos from the controllers
    ///     2) decouples the DbContext and EF from the controllers
    ///     3) manages the UoW
    /// </summary>
    /// <remarks>
    /// This class implements the 'Unit of Work' pattern in which
    /// the 'UoW' serves as a facade for querying and saving to the database.
    /// Querying is delegated to 'repositories'.
    /// Each repository serves as a container dedicated to a particular
    /// root entity type such as a <see cref='Person'>.
    /// A repository typically exposes 'Get' methods for querying and
    /// will offer add, update, and delete methods if those features are supported.
    /// The repositories rely on their parent UoW to provide the interface to the
    /// data layer (which is the EF DbContext in DDMS).
    /// </remarks>
    public partial class ARCCv2UOW : IARCCv2UOW, IDisposable
    {
        public ARCCv2UOW(IRepositoryProvider repositoryProvider)
        {
            CreateDbContext();

            repositoryProvider.DbContext = DbContext;
            RepositoryProvider = repositoryProvider;
        }

        public int SaveChanges()
        {
            return DbContext.SaveChanges();
        }

        protected void CreateDbContext()
        {
            DbContext = new ARCCv2DbContext();

            // Do NOT enable proxied entities, else serialization fails
            DbContext.Configuration.ProxyCreationEnabled = false;

            // Load navigation properties explicitly (avoid serialization trouble)
            DbContext.Configuration.LazyLoadingEnabled = false;

            // Because Web API will perform validation, we don't need///want EF to do so.
            DbContext.Configuration.ValidateOnSaveEnabled = false;

            DbContext.Configuration.AutoDetectChangesEnabled = true;
            // We won't use this performance tweak because we don't need
            // the extra performance and, when autodetect is false,
            // we'd have to be careful.  We're not going to be that careful.
        }

        protected IRepositoryProvider RepositoryProvider { get; set; }

        public IRepository<T> GetRepositoryForEntityType<T>() where T : class
        {
            return RepositoryProvider.GetRepositoryForEntityType<T>();
        }

        protected T GetRepo<T>() where T : class
        {
            return RepositoryProvider.GetRepository<T>();
        }

        private ARCCv2DbContext DbContext { get; set; }

        public void Dispose()
        {
            Dispose(true);
            GC.SuppressFinalize(this);
        }

        protected virtual void Dispose(bool disposing)
        {
            if (disposing)
            {
                if (DbContext != null)
                {
                    DbContext.Dispose();
                }
            }
        }
    }
}
